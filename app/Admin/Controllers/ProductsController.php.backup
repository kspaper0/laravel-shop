<?php

namespace App\Admin\Controllers;

use App\Models\Product;
use App\Models\Category;
use App\Http\Controllers\Controller;
use Encore\Admin\Controllers\HasResourceActions;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Encore\Admin\Show;
//use Illuminate\Http\Request;

class ProductsController extends Controller
{
    use HasResourceActions;

    /**
     * Index interface.
     *
     * @param Content $content
     * @return Content
     */
    public function index(Content $content)
    {
        return $content
            ->header('Product List')
            ->body($this->grid());
    }

    /**
     * Show interface.
     *
     * @param mixed   $id
     * @param Content $content
     * @return Content
     */
    // public function show($id, Content $content)
    // {
    //     return $content
    //         ->header('Detail')
    //         ->description('description')
    //         ->body($this->detail($id));
    // }

    /**
     * Edit interface.
     *
     * @param mixed   $id
     * @param Content $content
     * @return Content
     */
    public function edit($id, Content $content)
    {
        return $content
            ->header('Edit Product')
            ->body($this->form()->edit($id));
    }

    /**
     * Create interface.
     *
     * @param Content $content
     * @return Content
     */
    public function create(Content $content)
    {
        return $content
            ->header('Add Products')
            ->body($this->form());
    }

    /**
     * Make a grid builder.
     *
     * @return Grid
     */
    protected function grid()
    {
        $grid = new Grid(new Product);
        // 使用 with 来预加载商品类目数据，减少 SQL 查询
        $grid->model()->where('type', Product::TYPE_NORMAL)->with(['category']);
        $grid->id('ID')->sortable();
        $grid->title('Title');
        // Laravel-Admin 支持用符号 . 来展示关联关系的字段
        $grid->column('category.name', 'Category');
        $grid->on_sale('On sale')->display(function ($value) {
            return $value ? 'Yes' : 'No'; 
        });
        $grid->price('Price');
        $grid->rating('Rating');
        $grid->sold_count('Sold');
        $grid->review_count('Review');
        
        $grid->actions(function ($actions) {
            $actions->disableView();
            $actions->disableDelete();
        });

        $grid->tools(function ($tools) {
            $tools->batch(function ($batch) {
                $batch->disableDelete();
            });
        });

        return $grid;
    }

    /**
     * Make a show builder.
     *
     * @param mixed   $id
     * @return Show
     */
    // protected function detail($id)
    // {
    //     $show = new Show(Product::findOrFail($id));

    //     $show->id('Id');
    //     $show->title('Title');
    //     $show->description('Description');
    //     $show->image('Image');
    //     $show->on_sale('On sale');
    //     $show->rating('Rating');
    //     $show->sold_count('Sold count');
    //     $show->review_count('Review count');
    //     $show->price('Price');
    //     $show->created_at('Created at');
    //     $show->updated_at('Updated at');

    //     return $show;
    // }

    /**
     * Make a form builder.
     *
     * @return Form
     */
    protected function form()
    {
        $form = new Form(new Product);

        $form->hidden('type')->value(Product::TYPE_NORMAL);
        // 创建一个输入框，第一个参数 title 是模型的字段名，第二个参数是该字段描述
        $form->text('title', 'Title')->rules('required');

        // 添加一个类目字段，与之前类目管理类似，使用 Ajax 的方式来搜索添加
        $form->select('category_id', 'Category')->options(function ($id) {
            $category = Category::find($id);
            if ($category) {
                return [$category->id => $category->full_name];
            }
        })->ajax('/admin/api/categories?is_directory=0');
        // ->options() 用于编辑商品时展示该商品的类目
        // Laravel-Admin 会把 category_id 字段值传给匿名函数
        // 匿名函数需要返回 [id => value] 格式的返回值
        // 由于 options 需要 Array 
        // e.g. options([]);
        // 所以， 最后返回， return [..];

        $form->image('image', 'Image')->rules('required|image');
        // 创建一个富文本编辑器
        $form->editor('description', 'Description')->rules('required');
        // 创建一组单选框
        $form->radio('on_sale', 'On Sale')->options(['1' => 'Yes', '0'=> 'No'])->default('0');
        // 直接添加一对多的关联模型
        $form->hasMany('skus', 'SKU List', function (Form\NestedForm $form) {
            $form->text('title', 'SKU Title')->rules('required');
            $form->text('description', 'SKU Description')->rules('required');
            $form->text('price', 'Price')->rules('required|numeric|min:0.01');
            $form->text('stock', 'Stock')->rules('required|integer|min:0');
        });

        // 定义事件回调，当模型即将保存时会触发这个回调
        $form->saving(function (Form $form) {
            $form->model()->price = collect($form->input('skus'))->where(Form::REMOVE_FLAG_NAME, 0)->min('price') ?: 0;
            });

        return $form;
    }
}
